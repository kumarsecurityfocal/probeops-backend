name: ProbeOps API CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: probeops_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: probeops_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.docker.txt
          pip install pytest pytest-cov flake8
      
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Run tests with pytest
        env:
          DATABASE_URL: postgresql://probeops_test:test_password@localhost:5432/probeops_test
          JWT_SECRET_KEY: test_jwt_secret_key
          API_KEY_SECRET: test_api_key_secret
          CORS_ORIGINS: https://probeops.com,https://www.probeops.com
        run: |
          pytest --cov=. --cov-report=xml
      
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  build:
    name: Build Docker Image
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/probeops-api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=short
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    needs: build
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    runs-on: ubuntu-latest
    environment: staging
    concurrency: staging_environment
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Add SSH known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
      
      - name: Deploy to staging server
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          scp docker-compose.backend.yml $DEPLOY_USER@$DEPLOY_HOST:/opt/probeops/
          scp .env.backend.template $DEPLOY_USER@$DEPLOY_HOST:/opt/probeops/.env.backend.tmp
          ssh $DEPLOY_USER@$DEPLOY_HOST <<EOF
            cd /opt/probeops
            # Pull the latest image
            docker pull ghcr.io/${{ github.repository }}/probeops-api:sha-${GITHUB_SHA::7}
            # Update the image tag in docker-compose
            sed -i "s/probeops-api:.*$/probeops-api:sha-${GITHUB_SHA::7}/" docker-compose.backend.yml
            # Merge environment variables (keeping existing secrets)
            if [ -f .env.backend ]; then
              grep -v "SECRET\|PASSWORD\|KEY" .env.backend.tmp > .env.backend.new
              grep "SECRET\|PASSWORD\|KEY" .env.backend >> .env.backend.new
              mv .env.backend.new .env.backend
              rm .env.backend.tmp
            else
              mv .env.backend.tmp .env.backend
            fi
            # Restart the services
            docker-compose -f docker-compose.backend.yml down
            docker-compose -f docker-compose.backend.yml up -d
          EOF
      
      - name: Verify deployment
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        run: |
          ssh $DEPLOY_USER@$DEPLOY_HOST <<EOF
            # Wait for the container to be fully started
            sleep 10
            # Check if the container is running
            docker ps | grep probeops-api
            # Check the health endpoint
            docker exec probeops-api curl -s http://localhost:5000/api/health | grep -q "healthy"
          EOF

  deploy-production:
    name: Deploy to Production
    needs: [build, deploy-staging]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    runs-on: ubuntu-latest
    environment: production
    concurrency: production_environment
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Add SSH known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
      
      - name: Deploy to production server
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          scp docker-compose.backend.yml $DEPLOY_USER@$DEPLOY_HOST:/opt/probeops/
          ssh $DEPLOY_USER@$DEPLOY_HOST <<EOF
            cd /opt/probeops
            # Pull the latest image
            docker pull ghcr.io/${{ github.repository }}/probeops-api:sha-${GITHUB_SHA::7}
            # Update the image tag in docker-compose
            sed -i "s/probeops-api:.*$/probeops-api:sha-${GITHUB_SHA::7}/" docker-compose.backend.yml
            # Restart the services with zero downtime
            docker-compose -f docker-compose.backend.yml up -d --no-deps --scale api=2 --no-recreate api
            sleep 10
            docker-compose -f docker-compose.backend.yml up -d --force-recreate api
          EOF
      
      - name: Verify production deployment
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        run: |
          ssh $DEPLOY_USER@$DEPLOY_HOST <<EOF
            # Wait for the container to be fully started
            sleep 15
            # Check if the container is running
            docker ps | grep probeops-api
            # Check the health endpoint
            docker exec probeops-api curl -s http://localhost:5000/api/health | grep -q "healthy"
            # Log deployment success
            echo "Deployment to production completed successfully at $(date)" >> /opt/probeops/deployment.log
          EOF
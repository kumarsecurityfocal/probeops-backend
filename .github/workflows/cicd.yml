name: ProbeOps API CI/CD

on:
  push:
    branches: [ main, master, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main, master, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: probeops_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov flake8
        pip install -r requirements.docker.txt

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      env:
        DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/probeops_test"
        JWT_SECRET_KEY: "test-jwt-secret-key"
        API_KEY_SECRET: "test-api-key-secret"
        TESTING: "True"
      run: |
        pytest --cov=. tests/

    - name: Generate coverage report
      run: |
        pytest --cov=. tests/ --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    name: Build Docker Image
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/${{ github.repository }}/probeops-api
        tags: |
          type=sha
          type=ref,event=branch
          type=ref,event=tag

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    
    steps:
    - uses: actions/checkout@v3

    - name: Set image tag
      id: set-tag
      run: |
        if [ "${{ github.event_name }}" == "push" ]; then
          echo "IMAGE_TAG=sha-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        else
          echo "IMAGE_TAG=sha-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        fi

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add known hosts
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts

    - name: Deploy to staging server
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        scp docker-compose.backend.yml $DEPLOY_USER@$DEPLOY_HOST:/tmp/docker-compose.yml
        scp .env.backend.template $DEPLOY_USER@$DEPLOY_HOST:/tmp/.env.backend
        scp scripts/deploy.sh $DEPLOY_USER@$DEPLOY_HOST:/tmp/deploy.sh
        
        ssh $DEPLOY_USER@$DEPLOY_HOST "chmod +x /tmp/deploy.sh && /tmp/deploy.sh --environment staging --image-tag ${{ env.IMAGE_TAG }} --config /tmp/docker-compose.yml"

  deploy-production:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    environment: production
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    
    steps:
    - uses: actions/checkout@v3

    - name: Set image tag
      id: set-tag
      run: |
        echo "IMAGE_TAG=sha-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add known hosts
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts

    - name: Deploy to production server
      env:
        DEPLOY_HOST: ${{ secrets.PROD_DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.PROD_DEPLOY_USER }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        scp docker-compose.backend.yml $DEPLOY_USER@$DEPLOY_HOST:/tmp/docker-compose.yml
        scp .env.backend.template $DEPLOY_USER@$DEPLOY_HOST:/tmp/.env.backend
        scp scripts/deploy.sh $DEPLOY_USER@$DEPLOY_HOST:/tmp/deploy.sh
        
        ssh $DEPLOY_USER@$DEPLOY_HOST "chmod +x /tmp/deploy.sh && /tmp/deploy.sh --environment production --image-tag ${{ env.IMAGE_TAG }} --config /tmp/docker-compose.yml"